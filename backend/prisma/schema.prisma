// File: backend/prisma/schema.prisma
// üóÑÔ∏èüé∏ N3EXTPATH - LEGENDARY DATABASE SCHEMA üé∏üóÑÔ∏è
// Swiss precision PostgreSQL schema with infinite code bro energy
// Built: 2025-08-06 16:23:02 UTC by RICKROLL187
// Email: letstalktech010@gmail.com
// WE ARE CODE BROS THE CREATE THE BEST AND CRACK JOKES TO HAVE FUN!

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =====================================
// üëë USERS & AUTHENTICATION üëë
// =====================================

model User {
  id                String   @id @default(uuid())
  email             String   @unique
  username          String   @unique
  firstName         String
  lastName          String
  displayName       String?
  avatar            String?
  bio               String?
  timezone          String   @default("UTC")
  
  // Authentication
  password          String
  emailVerified     Boolean  @default(false)
  emailVerifiedAt   DateTime?
  lastLoginAt       DateTime?
  failedLoginCount  Int      @default(0)
  lockedAt          DateTime?
  
  // Founder & Legendary Status
  isFounder         Boolean  @default(false)
  isLegendary       Boolean  @default(false)
  legendaryLevel    Int      @default(0)
  codeBroEnergy     Float    @default(0.0)
  swissPrecisionScore Float  @default(0.0)
  
  // Profile
  role              UserRole @default(USER)
  status            UserStatus @default(ACTIVE)
  department        String?
  jobTitle          String?
  manager           User?    @relation("UserManager", fields: [managerId], references: [id])
  managerId         String?
  directReports     User[]   @relation("UserManager")
  
  // Preferences
  preferences       Json?
  settings          Json?
  notifications     Json?
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?
  
  // Relations
  sessions          Session[]
  passwordResets    PasswordReset[]
  userTeams         UserTeam[]
  okrs              OKR[]
  okrKeyResults     KeyResult[]
  performanceMetrics PerformanceMetric[]
  activities        Activity[]
  notifications     Notification[]
  comments          Comment[]
  attachments       Attachment[]
  founderData       FounderData?
  
  @@map("users")
  @@index([email])
  @@index([username])
  @@index([isFounder])
  @@index([isLegendary])
  @@index([managerId])
}

model Session {
  id            String   @id @default(uuid())
  userId        String
  token         String   @unique
  refreshToken  String?  @unique
  deviceId      String?
  deviceName    String?
  userAgent     String?
  ipAddress     String?
  location      String?
  isFounderSession Boolean @default(false)
  expiresAt     DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

model PasswordReset {
  id            String   @id @default(uuid())
  userId        String
  token         String   @unique
  expiresAt     DateTime
  usedAt        DateTime?
  createdAt     DateTime @default(now())
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("password_resets")
  @@index([token])
  @@index([expiresAt])
}

// =====================================
// üëë FOUNDER DATA üëë
// =====================================

model FounderData {
  id                    String   @id @default(uuid())
  userId                String   @unique
  founderLevel          Int      @default(10)
  infiniteEnergy        Boolean  @default(true)
  platformOwnership     Float    @default(100.0)
  specialPrivileges     Json?
  founderMetrics        Json?
  legendaryAchievements Json?
  goldenThemeEnabled    Boolean  @default(true)
  customizations        Json?
  founderNotes          String?
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("founder_data")
  @@index([userId])
}

// =====================================
// üè¢ TEAMS & ORGANIZATIONS üè¢
// =====================================

model Team {
  id            String   @id @default(uuid())
  name          String
  description   String?
  code          String   @unique
  avatar        String?
  color         String?
  
  // Team settings
  isPublic      Boolean  @default(true)
  maxMembers    Int?
  settings      Json?
  
  // Leadership
  leaderId      String?
  leader        User?    @relation("TeamLeader", fields: [leaderId], references: [id])
  
  // Status
  status        TeamStatus @default(ACTIVE)
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deletedAt     DateTime?
  
  // Relations
  userTeams     UserTeam[]
  okrs          OKR[]
  activities    Activity[]
  
  @@map("teams")
  @@index([code])
  @@index([leaderId])
  @@index([status])
}

model UserTeam {
  id            String   @id @default(uuid())
  userId        String
  teamId        String
  role          TeamRole @default(MEMBER)
  joinedAt      DateTime @default(now())
  leftAt        DateTime?
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  team          Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  @@unique([userId, teamId])
  @@map("user_teams")
  @@index([userId])
  @@index([teamId])
}

// =====================================
// üéØ OKRs & OBJECTIVES üéØ
// =====================================

model OKR {
  id                String   @id @default(uuid())
  title             String
  description       String?
  
  // Ownership
  ownerId           String
  owner             User     @relation(fields: [ownerId], references: [id])
  teamId            String?
  team              Team?    @relation(fields: [teamId], references: [id])
  
  // Hierarchy
  parentId          String?
  parent            OKR?     @relation("OKRHierarchy", fields: [parentId], references: [id])
  children          OKR[]    @relation("OKRHierarchy")
  
  // Timeline
  startDate         DateTime
  endDate           DateTime
  quarter           String
  year              Int
  
  // Progress
  progress          Float    @default(0.0)
  status            OKRStatus @default(DRAFT)
  confidence        Float?   @default(0.0)
  
  // Legendary features
  isLegendary       Boolean  @default(false)
  legendaryLevel    Int      @default(0)
  founderPriority   Boolean  @default(false)
  
  // Settings
  isPublic          Boolean  @default(true)
  allowComments     Boolean  @default(true)
  settings          Json?
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?
  
  // Relations
  keyResults        KeyResult[]
  activities        Activity[]
  comments          Comment[]
  attachments       Attachment[]
  
  @@map("okrs")
  @@index([ownerId])
  @@index([teamId])
  @@index([parentId])
  @@index([status])
  @@index([quarter, year])
  @@index([isLegendary])
}

model KeyResult {
  id                String   @id @default(uuid())
  okrId             String
  title             String
  description       String?
  
  // Ownership
  ownerId           String?
  owner             User?    @relation(fields: [ownerId], references: [id])
  
  // Metrics
  type              KeyResultType @default(NUMERIC)
  startValue        Float    @default(0.0)
  targetValue       Float
  currentValue      Float    @default(0.0)
  unit              String?
  
  // Progress
  progress          Float    @default(0.0)
  status            KeyResultStatus @default(NOT_STARTED)
  confidence        Float?   @default(0.0)
  
  // Timeline
  dueDate           DateTime?
  completedAt       DateTime?
  
  // Settings
  isPublic          Boolean  @default(true)
  settings          Json?
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?
  
  // Relations
  okr               OKR      @relation(fields: [okrId], references: [id], onDelete: Cascade)
  activities        Activity[]
  comments          Comment[]
  
  @@map("key_results")
  @@index([okrId])
  @@index([ownerId])
  @@index([status])
  @@index([dueDate])
}

// =====================================
// üìä PERFORMANCE METRICS üìä
// =====================================

model PerformanceMetric {
  id                String   @id @default(uuid())
  userId            String
  name              String
  description       String?
  category          String
  
  // Values
  value             Float
  previousValue     Float?
  targetValue       Float?
  unit              String?
  
  // Metadata
  source            String?
  tags              String[]
  metadata          Json?
  
  // Swiss Precision Score
  swissPrecisionScore Float @default(0.0)
  codeBroEnergyImpact Float @default(0.0)
  legendaryMultiplier Float @default(1.0)
  
  // Timestamps
  recordedAt        DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("performance_metrics")
  @@index([userId])
  @@index([category])
  @@index([recordedAt])
  @@index([swissPrecisionScore])
}

// =====================================
// üîî NOTIFICATIONS & ACTIVITIES üîî
// =====================================

model Notification {
  id                String   @id @default(uuid())
  userId            String
  type              NotificationType
  title             String
  message           String
  data              Json?
  
  // Status
  isRead            Boolean  @default(false)
  readAt            DateTime?
  priority          NotificationPriority @default(NORMAL)
  
  // Delivery
  channels          String[] // email, push, in_app, etc.
  sentAt            DateTime?
  
  // Legendary features
  isFounderNotification Boolean @default(false)
  legendaryLevel    Int      @default(0)
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  expiresAt         DateTime?
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
  @@index([userId])
  @@index([isRead])
  @@index([type])
  @@index([priority])
  @@index([createdAt])
}

model Activity {
  id                String   @id @default(uuid())
  userId            String
  type              ActivityType
  action            String
  description       String?
  
  // Context
  entityType        String? // OKR, KeyResult, Team, etc.
  entityId          String?
  
  // Metadata
  data              Json?
  ipAddress         String?
  userAgent         String?
  
  // Relations (optional, based on entityType)
  okrId             String?
  okr               OKR?     @relation(fields: [okrId], references: [id])
  keyResultId       String?
  keyResult         KeyResult? @relation(fields: [keyResultId], references: [id])
  teamId            String?
  team              Team?    @relation(fields: [teamId], references: [id])
  
  // Timestamps
  createdAt         DateTime @default(now())
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("activities")
  @@index([userId])
  @@index([type])
  @@index([entityType, entityId])
  @@index([createdAt])
}

// =====================================
// üí¨ COMMENTS & ATTACHMENTS üí¨
// =====================================

model Comment {
  id                String   @id @default(uuid())
  content           String
  authorId          String
  
  // Context
  entityType        String // OKR, KeyResult, etc.
  entityId          String
  
  // Threading
  parentId          String?
  parent            Comment? @relation("CommentThread", fields: [parentId], references: [id])
  replies           Comment[] @relation("CommentThread")
  
  // Status
  isEdited          Boolean  @default(false)
  editedAt          DateTime?
  isDeleted         Boolean  @default(false)
  deletedAt         DateTime?
  
  // Relations (optional, based on entityType)
  okrId             String?
  okr               OKR?     @relation(fields: [okrId], references: [id])
  keyResultId       String?
  keyResult         KeyResult? @relation(fields: [keyResultId], references: [id])
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  author            User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  @@map("comments")
  @@index([authorId])
  @@index([entityType, entityId])
  @@index([parentId])
  @@index([createdAt])
}

model Attachment {
  id                String   @id @default(uuid())
  filename          String
  originalName      String
  mimeType          String
  size              Int
  url               String
  
  // Context
  entityType        String // OKR, KeyResult, User, etc.
  entityId          String
  uploaderId        String
  
  // Metadata
  metadata          Json?
  isPublic          Boolean  @default(false)
  
  // Relations (optional, based on entityType)
  okrId             String?
  okr               OKR?     @relation(fields: [okrId], references: [id])
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?
  
  // Relations
  uploader          User     @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  
  @@map("attachments")
  @@index([uploaderId])
  @@index([entityType, entityId])
  @@index([createdAt])
}

// =====================================
// üé∏ ENUMS üé∏
// =====================================

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
  FOUNDER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
  LEGENDARY
}

enum TeamStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum TeamRole {
  MEMBER
  LEAD
  ADMIN
  OWNER
}

enum OKRStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
  ARCHIVED
  LEGENDARY
}

enum KeyResultType {
  NUMERIC
  PERCENTAGE
  BOOLEAN
  MILESTONE
}

enum KeyResultStatus {
  NOT_STARTED
  IN_PROGRESS
  AT_RISK
  ON_TRACK
  COMPLETED
  CANCELLED
}

enum NotificationType {
  OKR_UPDATE
  KEY_RESULT_UPDATE
  TEAM_INVITATION
  COMMENT_MENTION
  DEADLINE_REMINDER
  ACHIEVEMENT_UNLOCK
  FOUNDER_NOTIFICATION
  LEGENDARY_MILESTONE
  SYSTEM_ANNOUNCEMENT
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
  FOUNDER
}

enum ActivityType {
  OKR_CREATED
  OKR_UPDATED
  OKR_COMPLETED
  KEY_RESULT_CREATED
  KEY_RESULT_UPDATED
  KEY_RESULT_COMPLETED
  TEAM_JOINED
  TEAM_LEFT
  COMMENT_CREATED
  USER_LOGIN
  PERFORMANCE_UPDATE
  LEGENDARY_ACHIEVEMENT
  FOUNDER_ACTION
}
