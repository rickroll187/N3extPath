# File: k8s/legendary-complete-deployment.yaml
# N3EXTPATH HR Platform - Complete Kubernetes Deployment
# Built: 2025-08-05 17:58:53 UTC by RICKROLL187
# WE ARE CODE BROS THE CREATE THE BEST AND CRACK JOKES TO HAVE FUN!

apiVersion: v1
kind: Namespace
metadata:
  name: n3extpath-legendary
  labels:
    app: n3extpath-hr
    built-by: rickroll187
    legendary-status: maximum
    swiss-precision: enabled
    code-bro-energy: infinite

---
# ConfigMap for Environment Variables
apiVersion: v1
kind: ConfigMap
metadata:
  name: n3extpath-config
  namespace: n3extpath-legendary
  labels:
    app: n3extpath-hr
    component: config
data:
  DATABASE_URL: "postgresql://n3extpath_user:legendary_password@postgres-service:5432/n3extpath_hr"
  REDIS_URL: "redis://redis-service:6379/0"
  JWT_SECRET: "legendary_jwt_secret_change_in_production"
  LEGENDARY_MODE: "true"
  SWISS_PRECISION: "enabled"
  CODE_BRO_ENERGY: "maximum"
  RICKROLL187_STATUS: "legendary_founder"
  API_VERSION: "v1"
  DEBUG: "false"
  LOG_LEVEL: "INFO"
  CORS_ORIGINS: "*"
  MAX_WORKERS: "4"
  GUNICORN_TIMEOUT: "120"

---
# Secret for Sensitive Data
apiVersion: v1
kind: Secret
metadata:
  name: n3extpath-secrets
  namespace: n3extpath-legendary
  labels:
    app: n3extpath-hr
    component: secrets
type: Opaque
stringData:
  postgres-password: legendary_postgres_password_change_in_production
  redis-password: legendary_redis_password_change_in_production
  jwt-secret: legendary_jwt_secret_ultra_secure_change_in_production
  email-password: legendary_email_password_change_in_production
  aws-access-key: legendary_aws_access_key_change_in_production
  aws-secret-key: legendary_aws_secret_key_change_in_production
  legendary-founder-key: rickroll187_legendary_founder_access_key

---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
  namespace: n3extpath-legendary
  labels:
    app: postgres
    component: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
        component: database
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: n3extpath_hr
        - name: POSTGRES_USER
          value: n3extpath_user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: n3extpath-secrets
              key: postgres-password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - n3extpath_user
            - -d
            - n3extpath_hr
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - n3extpath_user
            - -d
            - n3extpath_hr
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: n3extpath-legendary
  labels:
    app: postgres
    component: database
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
  type: ClusterIP

---
# PostgreSQL PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: n3extpath-legendary
  labels:
    app: postgres
    component: storage
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: gp2

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
  namespace: n3extpath-legendary
  labels:
    app: redis
    component: cache
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
        component: cache
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command:
        - redis-server
        - --requirepass
        - $(REDIS_PASSWORD)
        - --maxmemory
        - 256mb
        - --maxmemory-policy
        - allkeys-lru
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: n3extpath-secrets
              key: redis-password
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: n3extpath-legendary
  labels:
    app: redis
    component: cache
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
    protocol: TCP
  type: ClusterIP

---
# Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: n3extpath-backend
  namespace: n3extpath-legendary
  labels:
    app: n3extpath-hr
    component: backend
    built-by: rickroll187
    legendary-status: maximum
spec:
  replicas: 3
  selector:
    matchLabels:
      app: n3extpath-hr
      component: backend
  template:
    metadata:
      labels:
        app: n3extpath-hr
        component: backend
        built-by: rickroll187
        legendary-status: maximum
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: backend
        image: ghcr.io/n3extpath/legendary-backend:latest
        ports:
        - containerPort: 8000
          name: http
        envFrom:
        - configMapRef:
            name: n3extpath-config
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: n3extpath-secrets
              key: postgres-password
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: n3extpath-secrets
              key: redis-password
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: n3extpath-secrets
              key: jwt-secret
        - name: LEGENDARY_FOUNDER_KEY
          valueFrom:
            secretKeyRef:
              name: n3extpath-secrets
              key: legendary-founder-key
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
        startupProbe:
          httpGet:
            path: /startup
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 10
        volumeMounts:
        - name: app-logs
          mountPath: /app/logs
        - name: temp-storage
          mountPath: /tmp
      volumes:
      - name: app-logs
        emptyDir: {}
      - name: temp-storage
        emptyDir: {}
      imagePullSecrets:
      - name: ghcr-secret

---
# Backend Service
apiVersion: v1
kind: Service
metadata:
  name: n3extpath-backend-service
  namespace: n3extpath-legendary
  labels:
    app: n3extpath-hr
    component: backend
spec:
  selector:
    app: n3extpath-hr
    component: backend
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: http
  type: ClusterIP

---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: n3extpath-frontend
  namespace: n3extpath-legendary
  labels:
    app: n3extpath-hr
    component: frontend
    built-by: rickroll187
    legendary-status: maximum
spec:
  replicas: 2
  selector:
    matchLabels:
      app: n3extpath-hr
      component: frontend
  template:
    metadata:
      labels:
        app: n3extpath-hr
        component: frontend
        built-by: rickroll187
        legendary-status: maximum
    spec:
      containers:
      - name: frontend
        image: ghcr.io/n3extpath/legendary-frontend:latest
        ports:
        - containerPort: 80
          name: http
        env:
        - name: REACT_APP_API_URL
          value: "https://api.n3extpath.com"
        - name: REACT_APP_WS_URL
          value: "wss://api.n3extpath.com/ws"
        - name: REACT_APP_LEGENDARY_MODE
          value: "true"
        - name: REACT_APP_RICKROLL187_FOUNDER
          value: "true"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: n3extpath-frontend-service
  namespace: n3extpath-legendary
  labels:
    app: n3extpath-hr
    component: frontend
spec:
  selector:
    app: n3extpath-hr
    component: frontend
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  type: ClusterIP

---
# Ingress Controller
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: n3extpath-ingress
  namespace: n3extpath-legendary
  labels:
    app: n3extpath-hr
    component: ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/websocket-services: "n3extpath-backend-service"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Legendary-Status "MAXIMUM" always;
      add_header X-Built-By "RICKROLL187" always;
      add_header X-Swiss-Precision "ENABLED" always;
      add_header X-Code-Bro-Energy "INFINITE" always;
spec:
  tls:
  - hosts:
    - n3extpath.com
    - www.n3extpath.com
    - api.n3extpath.com
    secretName: n3extpath-tls
  rules:
  - host: n3extpath.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: n3extpath-frontend-service
            port:
              number: 80
  - host: www.n3extpath.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: n3extpath-frontend-service
            port:
              number: 80
  - host: api.n3extpath.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: n3extpath-backend-service
            port:
              number: 8000

---
# Horizontal Pod Autoscaler for Backend
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: n3extpath-backend-hpa
  namespace: n3extpath-legendary
  labels:
    app: n3extpath-hr
    component: autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: n3extpath-backend
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
# Frontend HPA
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: n3extpath-frontend-hpa
  namespace: n3extpath-legendary
  labels:
    app: n3extpath-hr
    component: autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: n3extpath-frontend
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70

---
# Network Policy for Security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: n3extpath-network-policy
  namespace: n3extpath-legendary
  labels:
    app: n3extpath-hr
    component: security
spec:
  podSelector:
    matchLabels:
      app: n3extpath-hr
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: nginx-ingress
    - namespaceSelector:
        matchLabels:
          name: n3extpath-legendary
    ports:
    - protocol: TCP
      port: 8000
    - protocol: TCP
      port: 80
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: n3extpath-legendary
    ports:
    - protocol: TCP
      port: 5432
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
    - protocol: UDP
      port: 53

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: n3extpath-backend-pdb
  namespace: n3extpath-legendary
  labels:
    app: n3extpath-hr
    component: availability
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: n3extpath-hr
      component: backend

---
# ServiceMonitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: n3extpath-backend-metrics
  namespace: n3extpath-legendary
  labels:
    app: n3extpath-hr
    component: monitoring
spec:
  selector:
    matchLabels:
      app: n3extpath-hr
      component: backend
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s
